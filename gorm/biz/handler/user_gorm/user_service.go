// Code generated by hertz generator.

package user_gorm

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/ggstudy11/learn_go_from_cloudwego/gorm/biz/dal/mysql"
	user_gorm "github.com/ggstudy11/learn_go_from_cloudwego/gorm/biz/hertz_gen/user_gorm"
	"github.com/ggstudy11/learn_go_from_cloudwego/gorm/biz/model"
	"github.com/ggstudy11/learn_go_from_cloudwego/gorm/biz/pack"
)

// UpdateUser .
// @router /v1/user/update/:user_id [POST]
func UpdateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_gorm.UpdateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	u := &model.User{}
	u.ID = uint(req.UserID)
	u.Name = req.Name
	u.Gender = int64(req.Gender)
	u.Age = req.Age
	u.Introduce = req.Introduce

	if err = mysql.UpdateUser(u); err != nil {
		c.JSON(consts.StatusInternalServerError, &user_gorm.UpdateUserResponse{Code: user_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &user_gorm.UpdateUserResponse{Code: user_gorm.Code_Success})
}

// DeleteUser .
// @router /v1/user/delete/:user_id [POST]
func DeleteUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_gorm.DeleteUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if err = mysql.DeleteUser(req.UserID); err != nil {
		c.JSON(consts.StatusInternalServerError, &user_gorm.DeleteUserResponse{Code: user_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &user_gorm.DeleteUserResponse{Code: user_gorm.Code_Success})
}

// QueryUser .
// @router /v1/user/query/ [POST]
func QueryUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_gorm.QueryUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	users, total, err := mysql.QueryUser(req.Keyword, req.Page, req.PageSize)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user_gorm.QueryUserResponse{Code: user_gorm.Code_DBErr, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, &user_gorm.QueryUserResponse{Code: user_gorm.Code_Success, Users: pack.Users(users), Total: total})
}

// CreateUser .
// @router /v1/user/create/ [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_gorm.CreateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	u := &model.User{}
	u.Name = req.Name
	u.Gender = int64(req.Gender)
	u.Age = req.Age
	u.Introduce = req.Introduce

	if err = mysql.CreateUser([]*model.User{u}); err != nil {
		c.JSON(consts.StatusInternalServerError, &user_gorm.CreateUserResponse{Code: user_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &user_gorm.CreateUserResponse{Code: user_gorm.Code_Success})
}
